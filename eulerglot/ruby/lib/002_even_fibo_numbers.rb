class EvenFiboNumbers

  #####
  # Problem:
  # Each new term in the Fibonacci sequence is generated by adding the previous two terms.
  # By starting with 1 and 2, the first 10 terms will be:
  #   1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
  # By considering the terms in the Fibonacci sequence whose values do not exceed
  # four million, find the sum of the even-valued terms.
  #
  # Solution:
  # Some kind of solutions such as iterating by each fibo number and then sum the even ones,
  # can take expensive time complexity. Cheaper solutions go over using just math, and for this
  # particular problem, thankfully we have a relation between even numbers:
  #   nextEven(n) -> 4f(n) + f(n-1)
  #
  # Then, in this case our time complexity is O(28) until 4 million.
  # http://stackoverflow.com/questions/24483199/more-efficient-solution-project-euler-2-even-fibonacci-numbers#40174314
  ######

  def self.sum_under(ceil)
    return 0  if ceil < 2
    return 2  if ceil < 10

    acc      = 0
    previous = 2
    current  = 8
    sum      = previous + current

    while current < ceil
      sum += acc
      acc = (4 * current) + previous
      previous = current
      current = acc
    end

    sum
  end

end
