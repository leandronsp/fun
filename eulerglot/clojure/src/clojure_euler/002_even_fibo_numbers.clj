(ns clojure-euler.002_even_fibo_numbers)

(comment
  "Problem:
  Each new term in the Fibonacci sequence is generated by adding the previous two terms.
  By starting with 1 and 2, the first 10 terms will be:
    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
  By considering the terms in the Fibonacci sequence whose values do not exceed
  four million, find the sum of the even-valued terms.

  Solution:
  Some kind of solutions such as iterating by each fibo number and then sum the even ones,
  can take expensive time complexity. Cheaper solutions go over using just math, and for this
  particular problem, thankfully we have a relation between even numbers:
    nextEven(n) -> 4f(n) + f(n-1)

  Then, in this case our time complexity is O(28) until 4 million.
  Source: http://stackoverflow.com/questions/24483199/more-efficient-solution-project-euler-2-even-fibonacci-numbers#40174314
  ")

(defn sum-fibo
  [previous current sum acc ceil]
    (if-not (< current ceil)
      sum
      (let [sum (+ sum acc)]
      (let [acc (+ (* 4 current) previous)]
      (recur current acc sum acc ceil)))))

;; O(28)
(defn sum-under
  [ceil]
  (cond
    (< ceil 2) 0
    (< ceil 10) 2
    :else (sum-fibo 2 8 10 0 ceil)))
