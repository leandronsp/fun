defmodule Phoenix.DynamicDispatch do

  def register(group, plug, opts) do
    true = :ets.insert(:phx_dyn_dispatch, {group, plug, opts})
  end

  def unregister(group, plug) do
    true = :ets.match_delete(:phx_dyn_dispatch, {group, plug, :_})
  end

  def init(opts), do: opts

  def call(conn, group: group) do
    Enum.reduce_while(:ets.lookup(:phx_dyn_dispatch, group), conn, fn
      {_, _plug, _opts}, %Plug.Conn{halted: true} = acc -> {:halt, acc}
      {_, plug, opts}, %Plug.Conn{} = acc -> {:cont, plug.call(acc, opts)}
    end)
  end
end

